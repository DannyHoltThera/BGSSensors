{
	"info": {
		"title": "British Geological Survey Sensors API",
		"version": "0.1.0",
		"description": "The British Geological Survey (BGS) Sensor API uses Version v1.1 of the OGC SensorThings API.<br><br> Paths/Endpoints that are not currently in use have been excluded, i.e. those relating to Actuators, MultiDatastreams, Tasks and TaskingCapabilities.<br><br> HistoricalLocations have also been removed.<br><br>"
	},
	"tags": [
		{
			"name": "Datastreams",
			"description": "The properties observed by a thing, and the type of sensor making the observations, e.g. a CT2X groundwater logger installed in borehole GGA04 measuring Water Temperature."
		},
		{
			"name": "FeaturesOfInterest",
			"description": "A feature about which observations are made, e.g. a borehole or a specific sensor monitoring point (location)."
		},
		{
			"name": "Locations",
			"description": "Current (and previous) location details for each thing, generally lat/long and elevation."
		},
		{
			"name": "Observations",
			"description": "Individual measurements recorded at a given point in time."
		}, {
			"name": "ObservedProperties",
			"description": "Dictionary of properties being observed. These can be directly measured or calculated, e.g. Water Temperature, Barometric Pressure."
		}, {
			"name": "Sensors",
			"description": "Dictionary of the instrument types being used to observe properties, e.g. a CT2X Groundwater Logger."
		}, {
			"name": "Things",
			"description": "Real-world sensors that can be integrated into communication network, e.g. a groundwater logger installed in borehole GGA04."
		}
	],
	"paths": {
		"/v1.1": {},
		"/v1.1/Datastreams": {
			"get": {
				"tags": ["Datastreams"],
				"summary": "Get all datastreams",
				"description": "Returns all the datastreams provided by this api (subject to any parameters set)",
				"parameters": [
					{
						"name": "$skip",
						"in": "query",
						"description": "The number of elements to skip from the collection",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$top",
						"in": "query",
						"description": "The number of elements to return",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$count",
						"in": "query",
						"description": "Flag indicating if the total number of items in the collection should be returned.",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}, {
						"name": "$filter",
						"in": "query",
						"description": "A filter query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/Datastreams"
						}
					}
				},
				"produces": ["application/json"]
			}
		},
		"/v1.1/Datastreams({entityId})": {
			"get": {
				"tags": ["Datastreams"],
				"summary": "Get information about an individual datastream",
				"description": "Returns information about the datastream identified by **entityId**",
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"examples": {
							"application/json": {
								"@iot.id": 52,
								"description": "Water Temperature from BGS Groundwater Logger GGA04 - Measured (C)",
								"name": "GGA04_01 Water Temperature",
								"observationType": "http://www.opengis.net/def/observationType/OGC-OM/2.0/OM_Measurement",
								"observedArea": {
									"type": "Point",
									"coordinates": {
										"0": -4.199763807,
										"1": 55.837714666
									}
								},
								"phenomenonTime": "2020-01-13T14:30:00.000Z/2021-05-17T11:15:00.000Z",
								"properties": {
									"sen_id": 779,
									"data_type": "Measured",
									"access_restriction": "Unrestricted",
									"data_usage": "Available under the Open Government Licence subject to the following acknowledgement accompanying the reproduced NERC materials \\\"Contains NERC materials Â©NERC [year]\\\"",
									"publish_yn": "Y"
								},
								"resultTime": "2020-01-13T14:30:00.000Z/2021-05-17T11:15:00.000Z\"",
								"unitOfMeasurement": {
									"name": "Temperature in Degrees Celsius",
									"symbol": "C",
									"defintion": null
								}
							}
						},
						"schema": {
							"$ref": "#/definitions/Datastream"
						}
					}
				},
				"produces": ["application/json"]
			}
		},
		"/v1.1/Datastreams({entityId})/Observations": {
			"get": {
				"tags": ["Datastreams"],
				"summary": "Get all observations for a datastream",
				"description": "Returns all observations for the datastream identified by **entityId** (subject to any other parameters set)",
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					},
					{
						"name": "$skip",
						"in": "query",
						"description": "The number of elements to skip from the collection",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$top",
						"in": "query",
						"description": "The number of elements to return",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$count",
						"in": "query",
						"description": "Flag indicating if the total number of items in the collection should be returned.",
						"required": false,
						"type": "boolean"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}, {
						"name": "$filter",
						"in": "query",
						"description": "A filter query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/Observations"
						}
					}
				},
				"produces": ["application/json"]
			}
		},
		"/v1.1/Datastreams({entityId})/ObservedProperty": {
			"get": {
				"tags": ["Datastreams"],
				"summary": "Get information about a datastream's observed property",
				"description": "Returns information about the observed property for the datastream identified by **entityId**",
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"examples": {
							"application/json": {
								"@iot.id": 8,
								"description": "Water Pressure",
								"name": "Water Pressure",
								"properties": {
									"sen_id": 187,
									"data_type": "Calculated",
									"formula": "Water Pressure (mbar H2O) = Pressure (mbar) - Barometric Pressure (mbar)",
									"publish_yn\"": "Y"
								}
							}
						},
						"schema": {
							"$ref": "#/definitions/ObservedProperty"
						}
					}
				},
				"produces": ["application/json"]
			}
		},
		"/v1.1/Datastreams({entityId})/ObservedProperty/Datastreams": {
			"get": {
				"tags": ["Datastreams"],
				"summary": "Get all datastreams that provide a datastream's observed property",
				"description": "Returns all datastreams that provide the observed property for the datastream identified by **entityId** (subject to any other parameters set)",
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					},
					{
						"name": "$skip",
						"in": "query",
						"description": "The number of elements to skip from the collection",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$top",
						"in": "query",
						"description": "The number of elements to return",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$count",
						"in": "query",
						"description": "Flag indicating if the total number of items in the collection should be returned.",
						"required": false,
						"type": "boolean"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}, {
						"name": "$filter",
						"in": "query",
						"description": "A filter query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/Datastreams"
						}
					}
				}
			}
		},
		"/v1.1/Datastreams({entityId})/Sensor": {
			"get": {
				"tags": ["Datastreams"],
				"summary": "Get information about a datastream's sensor type",
				"description": "Returns information about the sensor type for the datastream identified by **entityId**",
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"examples": {
							"application/json": {
								"@iot.id": 1,
								"description": "CT2X Groundwater logger measuring temperature, conductivity and pressure",
								"encodingType": "text/html",
								"metadata": "https://store.eonpro.com/store/p/2308-Aquistar-Conductivity-Loggers-CT2X-Cableless.aspx",
								"name": "CT2X Groundwater Logger",
								"properties": {
									"sen_id": 1,
									"complex_data_yn": "N",
									"publish_yn": "Y"
								}
							}
						},
						"schema": {
							"$ref": "#/definitions/Sensor"
						}
					}
				},
				"produces": ["application/json"]
			}
		},
		"/v1.1/Datastreams({entityId})/Sensor/Datastreams": {
			"get": {
				"tags": ["Datastreams"],
				"summary": "Get all datastreams which share a datastream's sensor type",
				"description": "Returns all datastreams which share the sensor type for the datastream identified by **entityId** (subject to any other parameters set)",
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					},
					{
						"name": "$skip",
						"in": "query",
						"description": "The number of elements to skip from the collection",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$top",
						"in": "query",
						"description": "The number of elements to return",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$count",
						"in": "query",
						"description": "Flag indicating if the total number of items in the collection should be returned.",
						"required": false,
						"type": "boolean"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}, {
						"name": "$filter",
						"in": "query",
						"description": "A filter query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/Datastreams"
						}
					}
				}
			}
		},
		"/v1.1/Datastreams({entityId})/Thing": {
			"get": {
				"tags": ["Datastreams"],
				"summary": "Get information about a datastream's thing",
				"description": "Returns information about the thing for the datastream identified by **entityId**",
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"examples": {
							"application/json": {
								"@iot.id": 10,
								"@iot.selfLink": "http://sensors-internal.bgs.ac.uk/FROST-Server/v1.1/Things(10)",
								"description": "Groundwater logger measuring temperature, conductivity and pressure",
								"name": "BGS Groundwater Logger GGA04",
								"properties": {
									"sen_id": "GGA04_01",
									"type": "SENSOR",
									"serial_no": 21915016,
									"observation_start_time": "2020-03-16T14:00:00.000Z",
									"data_capture": "Manual",
									"datum_z": 12.11,
									"datum_z_crs": "maOD",
									"datum_name": "Top of Borehole Casing",
									"borehole_reference": "GGA04",
									"access_restriction": "Unrestricted",
									"data_usage": "Available under the Open Government Licence subject to the following acknowledgement accompanying the reproduced NERC materials \\\"Contains NERC materials Â©NERC [year]\\\"",
									"publish_yn": "Y"
								}
							}
						},
						"schema": {
							"$ref": "#/definitions/Thing"
						}
					}
				},
				"produces": ["application/json"]
			}
		},
		"/v1.1/Datastreams({entityId})/Thing/Datastreams": {
			"get": {
				"tags": ["Datastreams"],
				"summary": "Get all datastreams provided by a datastream's thing",
				"description": "Returns all datastreams provided by the thing for the datastream identified by **entityId** (subject to any other parameters set)",
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					},
					{
						"name": "$skip",
						"in": "query",
						"description": "The number of elements to skip from the collection",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$top",
						"in": "query",
						"description": "The number of elements to return",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$count",
						"in": "query",
						"description": "Flag indicating if the total number of items in the collection should be returned.",
						"required": false,
						"type": "boolean"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}, {
						"name": "$filter",
						"in": "query",
						"description": "A filter query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/Datastreams"
						}
					}
				}
			}
		},
		"/v1.1/Datastreams({entityId})/Thing/Locations": {
			"get": {
				"tags": ["Datastreams"],
				"summary": "Get all locations for a datastream's thing",
				"description": "Returns all locations of the thing for the datastream identified by **entityId** (subject to any other parameters set)",
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					},
					{
						"name": "$skip",
						"in": "query",
						"description": "The number of elements to skip from the collection",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$top",
						"in": "query",
						"description": "The number of elements to return",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$count",
						"in": "query",
						"description": "Flag indicating if the total number of items in the collection should be returned.",
						"required": false,
						"type": "boolean"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}, {
						"name": "$filter",
						"in": "query",
						"description": "A filter query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/Locations"
						}
					}
				},
				"produces": ["application/json"]
			}
		},
		"/v1.1/FeaturesOfInterest": {
			"get": {
				"tags": ["FeaturesOfInterest"],
				"summary": "Get all features of interest",
				"description": "Returns all the features of interest provided by this api (subject to any parameters set)",
				"parameters": [
					{
						"name": "$skip",
						"in": "query",
						"description": "The number of elements to skip from the collection",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$top",
						"in": "query",
						"description": "The number of elements to return",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$count",
						"in": "query",
						"description": "Flag indicating if the total number of items in the collection should be returned.",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}, {
						"name": "$filter",
						"in": "query",
						"description": "A filter query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/FeaturesOfInterest"
						}
					}
				},
				"produces": ["application/json"]
			}
		},
		"/v1.1/FeaturesOfInterest({entityId})": {
			"get": {
				"tags": ["FeaturesOfInterest"],
				"summary": "Get information about an individual feature of interest",
				"description": "Returns information about the feature of interest identified by **entityId**",
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/FeatureOfInterest"
						}
					}
				},
				"produces": ["application/json"]
			}
		},
		"/v1.1/FeaturesOfInterest({entityId})/Observations": {
			"get": {
				"tags": ["FeaturesOfInterest"],
				"summary": "Get all observations for a feature of interest",
				"description": "Returns all observations for the feature of interest identified by **entityId** (subject to any other parameters set)",
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					},
					{
						"name": "$skip",
						"in": "query",
						"description": "The number of elements to skip from the collection",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$top",
						"in": "query",
						"description": "The number of elements to return",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$count",
						"in": "query",
						"description": "Flag indicating if the total number of items in the collection should be returned.",
						"required": false,
						"type": "boolean"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}, {
						"name": "$filter",
						"in": "query",
						"description": "A filter query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/Observations"
						}
					}
				}
			}
		},
		"/v1.1/Locations": {
			"get": {
				"tags": ["Locations"],
				"summary": "Get all locations",
				"description": "Returns all the locations provided by this api (subject to any parameters set)",
				"parameters": [
					{
						"name": "$skip",
						"in": "query",
						"description": "The number of elements to skip from the collection",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$top",
						"in": "query",
						"description": "The number of elements to return",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$count",
						"in": "query",
						"description": "Flag indicating if the total number of items in the collection should be returned.",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}, {
						"name": "$filter",
						"in": "query",
						"description": "A filter query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/Locations"
						}
					}
				}
			}
		},
		"/v1.1/Locations({entityId})": {
			"get": {
				"tags": ["Locations"],
				"summary": "Get information about an individual location",
				"description": "Returns information about the location identified by **entityId**",
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"examples": {
							"application/json": {
								"@iot.id": 28,
								"description": "BGS Groundwater Logger GGA04",
								"encodingType": "application/geo+json",
								"location": {
									"type": "Point",
									"coordinates": {
										"0": -4.19976380683196,
										"1": 55.837714666124
									}
								},
								"name": "SENSOR_GGA04_01",
								"properties": {
									"sen_id": 170155161,
									"site": "Site 2",
									"observatory": "UKGEOS Glasgow Observatory",
									"z": -4.82,
									"z_crs": "maOD",
									"from_date": "2021-02-24T10:15:00.000Z",
									"to_date": "None",
									"comments": "Height adjustment February 2021",
									"active_yn": "Y",
									"publish_yn": "Y"
								}
							}
						},
						"schema": {
							"$ref": "#/definitions/Location"
						}
					}
				},
				"produces": ["application/json"]
			}
		},
		"/v1.1/Locations({entityId})/Things": {
			"get": {
				"tags": ["Locations"],
				"summary": "Get information about the thing at the location",
				"description": "Returns information about the thing at the location identified by **entityId**",
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					},
					{
						"name": "$skip",
						"in": "query",
						"description": "The number of elements to skip from the collection",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$top",
						"in": "query",
						"description": "The number of elements to return",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$count",
						"in": "query",
						"description": "Flag indicating if the total number of items in the collection should be returned.",
						"required": false,
						"type": "boolean"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}, {
						"name": "$filter",
						"in": "query",
						"description": "A filter query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/Things"
						}
					}
				},
				"produces": ["application/json"]
			}
		},
		"/v1.1/Observations": {
			"get": {
				"tags": ["Observations"],
				"summary": "Get all observations",
				"description": "Returns all the observations provided by this api (subject to any parameters set)",
				"parameters": [
					{
						"name": "$skip",
						"in": "query",
						"description": "The number of elements to skip from the collection",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$top",
						"in": "query",
						"description": "The number of elements to return",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$count",
						"in": "query",
						"description": "Flag indicating if the total number of items in the collection should be returned.",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}, {
						"name": "$filter",
						"in": "query",
						"description": "A filter query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/Observations"
						}
					}
				}
			}
		},
		"/v1.1/Observations({entityId})": {
			"get": {
				"tags": ["Observations"],
				"summary": "Get information about an individual observation",
				"description": "Returns information about the observation identified by **entityId**",
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"examples": {
							"application/json": {
								"@iot.id": 168175600,
								"parameters": {
									"sen_id": 168175600,
									"publish_yn\"": "Y"
								},
								"phenomenonTime": "2021-02-24T14:30:00.000Z",
								"result": 11.61,
								"resultQuality": null,
								"resultTime": "2021-02-24T14:30:00.000Z",
								"validTime": null
							}
						},
						"schema": {
							"$ref": "#/definitions/Observation"
						}
					}
				},
				"produces": ["application/json"]
			}
		},
		"/v1.1/Observations({entityId})/Datastream": {
			"get": {
				"tags": ["Observations"],
				"summary": "Get information about an observation's datastream",
				"description": "Returns information about the datastream for the observation identified by **entityId**",
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"examples": {
							"application/json": {
								"@iot.id": 52,
								"description": "Water Temperature from BGS Groundwater Logger GGA04 - Measured (C)",
								"name": "GGA04_01 Water Temperature",
								"observationType": "http://www.opengis.net/def/observationType/OGC-OM/2.0/OM_Measurement",
								"observedArea": {
									"type": "Point",
									"coordinates": {
										"0": -4.199763807,
										"1": 55.837714666
									}
								},
								"phenomenonTime": "2020-01-13T14:30:00.000Z/2021-05-17T11:15:00.000Z",
								"properties": {
									"sen_id": 779,
									"data_type": "Measured",
									"access_restriction": "Unrestricted",
									"data_usage": "Available under the Open Government Licence subject to the following acknowledgement accompanying the reproduced NERC materials \\\"Contains NERC materials Â©NERC [year]\\\"",
									"publish_yn": "Y"
								},
								"resultTime": "2020-01-13T14:30:00.000Z/2021-05-17T11:15:00.000Z\"",
								"unitOfMeasurement": {
									"name": "Temperature in Degrees Celsius",
									"symbol": "C",
									"defintion": null
								}
							}
						},
						"schema": {
							"$ref": "#/definitions/Datastream"
						}
					}
				}
			}
		},
		"/v1.1/Observations({entityId})/Datastream/Observations": {
			"get": {
				"tags": ["Observations"],
				"summary": "Get all observations for an observations's datastream",
				"description": "Returns all observations for the datastream of the observation identified by **entityId** (subject to any other parameters set)",
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					},
					{
						"name": "$skip",
						"in": "query",
						"description": "The number of elements to skip from the collection",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$top",
						"in": "query",
						"description": "The number of elements to return",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$count",
						"in": "query",
						"description": "Flag indicating if the total number of items in the collection should be returned.",
						"required": false,
						"type": "boolean"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}, {
						"name": "$filter",
						"in": "query",
						"description": "A filter query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/Observations"
						}
					}
				}
			}
		},
		"/v1.1/Observations({entityId})/Datastream/ObservedProperty": {
			"get": {
				"tags": ["Observations"],
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"examples": {
							"application/json": {
								"@iot.id": 8,
								"description": "Water Pressure",
								"name": "Water Pressure",
								"properties": {
									"sen_id": 187,
									"data_type": "Calculated",
									"formula": "Water Pressure (mbar H2O) = Pressure (mbar) - Barometric Pressure (mbar)",
									"publish_yn\"": "Y"
								}
							}
						},
						"schema": {
							"$ref": "#/definitions/ObservedProperty"
						}
					}
				}
			}
		},
		"/v1.1/Observations({entityId})/Datastream/ObservedProperty/Datastreams": {
			"get": {
				"tags": ["Observations"],
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					},
					{
						"name": "$skip",
						"in": "query",
						"description": "The number of elements to skip from the collection",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$top",
						"in": "query",
						"description": "The number of elements to return",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$count",
						"in": "query",
						"description": "Flag indicating if the total number of items in the collection should be returned.",
						"required": false,
						"type": "boolean"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}, {
						"name": "$filter",
						"in": "query",
						"description": "A filter query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/Datastreams"
						}
					}
				}
			}
		},
		"/v1.1/Observations({entityId})/Datastream/Sensor": {
			"get": {
				"tags": ["Observations"],
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"examples": {
							"application/json": {
								"@iot.id": 1,
								"description": "CT2X Groundwater logger measuring temperature, conductivity and pressure",
								"encodingType": "text/html",
								"metadata": "https://store.eonpro.com/store/p/2308-Aquistar-Conductivity-Loggers-CT2X-Cableless.aspx",
								"name": "CT2X Groundwater Logger",
								"properties": {
									"sen_id": 1,
									"complex_data_yn": "N",
									"publish_yn": "Y"
								}
							}
						},
						"schema": {
							"$ref": "#/definitions/Sensor"
						}
					}
				}
			}
		},
		"/v1.1/Observations({entityId})/Datastream/Sensor/Datastreams": {
			"get": {
				"tags": ["Observations"],
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					},
					{
						"name": "$skip",
						"in": "query",
						"description": "The number of elements to skip from the collection",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$top",
						"in": "query",
						"description": "The number of elements to return",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$count",
						"in": "query",
						"description": "Flag indicating if the total number of items in the collection should be returned.",
						"required": false,
						"type": "boolean"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}, {
						"name": "$filter",
						"in": "query",
						"description": "A filter query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/Datastreams"
						}
					}
				}
			}
		},
		"/v1.1/Observations({entityId})/Datastream/Thing": {
			"get": {
				"tags": ["Observations"],
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"examples": {
							"application/json": {
								"@iot.id": 10,
								"@iot.selfLink": "http://sensors-internal.bgs.ac.uk/FROST-Server/v1.1/Things(10)",
								"description": "Groundwater logger measuring temperature, conductivity and pressure",
								"name": "BGS Groundwater Logger GGA04",
								"properties": {
									"sen_id": "GGA04_01",
									"type": "SENSOR",
									"serial_no": 21915016,
									"observation_start_time": "2020-03-16T14:00:00.000Z",
									"data_capture": "Manual",
									"datum_z": 12.11,
									"datum_z_crs": "maOD",
									"datum_name": "Top of Borehole Casing",
									"borehole_reference": "GGA04",
									"access_restriction": "Unrestricted",
									"data_usage": "Available under the Open Government Licence subject to the following acknowledgement accompanying the reproduced NERC materials \\\"Contains NERC materials Â©NERC [year]\\\"",
									"publish_yn": "Y"
								}
							}
						},
						"schema": {
							"$ref": "#/definitions/Thing"
						}
					}
				}
			}
		},
		"/v1.1/Observations({entityId})/Datastream/Thing/Datastreams": {
			"get": {
				"tags": ["Observations"],
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					},
					{
						"name": "$skip",
						"in": "query",
						"description": "The number of elements to skip from the collection",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$top",
						"in": "query",
						"description": "The number of elements to return",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$count",
						"in": "query",
						"description": "Flag indicating if the total number of items in the collection should be returned.",
						"required": false,
						"type": "boolean"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}, {
						"name": "$filter",
						"in": "query",
						"description": "A filter query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/Datastreams"
						}
					}
				}
			}
		},
		"/v1.1/Observations({entityId})/Datastream/Thing/Locations": {
			"get": {
				"tags": ["Observations"],
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					},
					{
						"name": "$skip",
						"in": "query",
						"description": "The number of elements to skip from the collection",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$top",
						"in": "query",
						"description": "The number of elements to return",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$count",
						"in": "query",
						"description": "Flag indicating if the total number of items in the collection should be returned.",
						"required": false,
						"type": "boolean"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}, {
						"name": "$filter",
						"in": "query",
						"description": "A filter query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/Locations"
						}
					}
				}
			}
		},
		"/v1.1/Observations({entityId})/FeatureOfInterest": {
			"get": {
				"tags": ["Observations"],
				"summary": "Get information about an observation's feature of interest",
				"description": "Returns information about the feature of interest for the observation identified by **entityId**",
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/FeatureOfInterest"
						}
					}
				}
			}
		},
		"/v1.1/Observations({entityId})/FeatureOfInterest/Observations": {
			"get": {
				"tags": ["Observations"],
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					},
					{
						"name": "$skip",
						"in": "query",
						"description": "The number of elements to skip from the collection",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$top",
						"in": "query",
						"description": "The number of elements to return",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$count",
						"in": "query",
						"description": "Flag indicating if the total number of items in the collection should be returned.",
						"required": false,
						"type": "boolean"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}, {
						"name": "$filter",
						"in": "query",
						"description": "A filter query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/Observations"
						}
					}
				}
			}
		},
		"/v1.1/ObservedProperties": {
			"get": {
				"tags": ["ObservedProperties"],
				"summary": "Get all observed properties",
				"description": "Returns all the observed properties provided by this api (subject to any parameters set)",
				"parameters": [
					{
						"name": "$skip",
						"in": "query",
						"description": "The number of elements to skip from the collection",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$top",
						"in": "query",
						"description": "The number of elements to return",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$count",
						"in": "query",
						"description": "Flag indicating if the total number of items in the collection should be returned.",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}, {
						"name": "$filter",
						"in": "query",
						"description": "A filter query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/ObservedProperties"
						}
					}
				},
				"produces": ["application/json"]
			}
		},
		"/v1.1/ObservedProperties({entityId})": {
			"get": {
				"tags": ["ObservedProperties"],
				"summary": "Get information about an individual observed property",
				"description": "Returns information about the observed property identified by **entityId**",
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"examples": {
							"application/json": {
								"@iot.id": 8,
								"description": "Water Pressure",
								"name": "Water Pressure",
								"properties": {
									"sen_id": 187,
									"data_type": "Calculated",
									"formula": "Water Pressure (mbar H2O) = Pressure (mbar) - Barometric Pressure (mbar)",
									"publish_yn\"": "Y"
								}
							}
						},
						"schema": {
							"$ref": "#/definitions/ObservedProperty"
						}
					}
				}
			}
		},
		"/v1.1/ObservedProperties({entityId})/Datastreams": {
			"get": {
				"tags": ["ObservedProperties"],
				"summary": "Get all datastreams for an observed property",
				"description": "Returns all datastreams for the observed property identified by **entityId** (subject to any other parameters set)",
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					},
					{
						"name": "$skip",
						"in": "query",
						"description": "The number of elements to skip from the collection",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$top",
						"in": "query",
						"description": "The number of elements to return",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$count",
						"in": "query",
						"description": "Flag indicating if the total number of items in the collection should be returned.",
						"required": false,
						"type": "boolean"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}, {
						"name": "$filter",
						"in": "query",
						"description": "A filter query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/Datastreams"
						}
					}
				}
			}
		},
		"/v1.1/Sensors": {
			"get": {
				"tags": ["Sensors"],
				"summary": "Get all sensor types",
				"description": "Returns all the sensor types provided by this api (subject to any parameters set)",
				"parameters": [
					{
						"name": "$skip",
						"in": "query",
						"description": "The number of elements to skip from the collection",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$top",
						"in": "query",
						"description": "The number of elements to return",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$count",
						"in": "query",
						"description": "Flag indicating if the total number of items in the collection should be returned.",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}, {
						"name": "$filter",
						"in": "query",
						"description": "A filter query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/Sensors"
						}
					}
				},
				"produces": ["application/json"]
			}
		},
		"/v1.1/Sensors({entityId})": {
			"get": {
				"tags": ["Sensors"],
				"summary": "Get information about an individual sensor type",
				"description": "Returns information about the sensor type identified by **entityId**",
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"examples": {
							"application/json": {
								"@iot.id": 1,
								"description": "CT2X Groundwater logger measuring temperature, conductivity and pressure",
								"encodingType": "text/html",
								"metadata": "https://store.eonpro.com/store/p/2308-Aquistar-Conductivity-Loggers-CT2X-Cableless.aspx",
								"name": "CT2X Groundwater Logger",
								"properties": {
									"sen_id": 1,
									"complex_data_yn": "N",
									"publish_yn": "Y"
								}
							}
						},
						"schema": {
							"$ref": "#/definitions/Sensor"
						}
					}
				}
			}
		},
		"/v1.1/Sensors({entityId})/Datastreams": {
			"get": {
				"tags": ["Sensors"],
				"summary": "Get all datastreams for a sensor type",
				"description": "Returns all datastreams for the sensor type identified by **entityId** (subject to any other parameters set)",
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					},
					{
						"name": "$skip",
						"in": "query",
						"description": "The number of elements to skip from the collection",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$top",
						"in": "query",
						"description": "The number of elements to return",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$count",
						"in": "query",
						"description": "Flag indicating if the total number of items in the collection should be returned.",
						"required": false,
						"type": "boolean"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}, {
						"name": "$filter",
						"in": "query",
						"description": "A filter query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/Datastreams"
						}
					}
				}
			}
		},
		"/v1.1/Things": {
			"get": {
				"tags": ["Things"],
				"summary": "Get all things",
				"description": "Returns all the things provided by this api (subject to any parameters set)",
				"parameters": [
					{
						"name": "$skip",
						"in": "query",
						"description": "The number of elements to skip from the collection",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$top",
						"in": "query",
						"description": "The number of elements to return",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$count",
						"in": "query",
						"description": "Flag indicating if the total number of items in the collection should be returned.",
						"required": false,
						"type": "boolean"
					},
					{
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}, {
						"name": "$filter",
						"in": "query",
						"description": "A filter query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/Things"
						}
					}
				}
			}
		},
		"/v1.1/Things({entityId})": {
			"get": {
				"tags": ["Things"],
				"summary": "Get information about an individual thing",
				"description": "Returns information about the thing identified by **entityId**",
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"examples": {
							"application/json": {
								"@iot.id": 10,
								"@iot.selfLink": "http://sensors-internal.bgs.ac.uk/FROST-Server/v1.1/Things(10)",
								"description": "Groundwater logger measuring temperature, conductivity and pressure",
								"name": "BGS Groundwater Logger GGA04",
								"properties": {
									"sen_id": "GGA04_01",
									"type": "SENSOR",
									"serial_no": 21915016,
									"observation_start_time": "2020-03-16T14:00:00.000Z",
									"data_capture": "Manual",
									"datum_z": 12.11,
									"datum_z_crs": "maOD",
									"datum_name": "Top of Borehole Casing",
									"borehole_reference": "GGA04",
									"access_restriction": "Unrestricted",
									"data_usage": "Available under the Open Government Licence subject to the following acknowledgement accompanying the reproduced NERC materials \\\"Contains NERC materials Â©NERC [year]\\\"",
									"publish_yn": "Y"
								}
							}
						},
						"schema": {
							"$ref": "#/definitions/Thing"
						}
					}
				}
			}
		},
		"/v1.1/Things({entityId})/Datastreams": {
			"get": {
				"tags": ["Things"],
				"summary": "Get all datastreams for a thing",
				"description": "Returns all datastreams for the thing identified by **entityId** (subject to any other parameters set)",
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					},
					{
						"name": "$skip",
						"in": "query",
						"description": "The number of elements to skip from the collection",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$top",
						"in": "query",
						"description": "The number of elements to return",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$count",
						"in": "query",
						"description": "Flag indicating if the total number of items in the collection should be returned.",
						"required": false,
						"type": "boolean"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}, {
						"name": "$filter",
						"in": "query",
						"description": "A filter query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/Datastreams"
						}
					}
				}
			}
		},
		"/v1.1/Things({entityId})/Locations": {
			"get": {
				"tags": ["Things"],
				"summary": "Get information about a things's location",
				"description": "Returns information about the location for the thing identified by **entityId**",
				"parameters": [
					{
						"name": "entityId",
						"in": "path",
						"description": "The id of the requested entity",
						"required": true,
						"type": "integer"
					},
					{
						"name": "$skip",
						"in": "query",
						"description": "The number of elements to skip from the collection",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$top",
						"in": "query",
						"description": "The number of elements to return",
						"required": false,
						"type": "integer"
					},
					{
						"name": "$count",
						"in": "query",
						"description": "Flag indicating if the total number of items in the collection should be returned.",
						"required": false,
						"type": "boolean"
					}, {
						"name": "$select",
						"in": "query",
						"description": "The list of properties that need to be returned",
						"required": false,
						"type": "string"
					}, {
						"name": "$expand",
						"in": "query",
						"description": "The list of related queries that need to be included in the result",
						"required": false,
						"type": "string"
					}, {
						"name": "$filter",
						"in": "query",
						"description": "A filter query",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "Successful Response",
						"schema": {
							"$ref": "#/definitions/Locations"
						}
					}
				}
			}
		}
	},
	"swagger": "2.0",
	"host": "sensors.bgs.ac.uk",
	"schemes": ["https"],
	"basePath": "/FROST-Server",
	"definitions": {
		"count": {
			"type": "integer",
			"description": "The total number of entities in the entityset"
		},
		"navigationLink": {
			"type": "string",
			"description": "A link to a related entity or entity set"
		},
		"nextLink": {
			"type": "string",
			"description": "The link to the next page of entities"
		},
		"selfLink": {
			"type": "string",
			"description": "The direct link to the entity"
		},
		"Datastream": {
			"type": "object",
			"properties": {
				"@iot.id": {
					"type": "integer",
					"description": "The Id of the datastream"
				},
				"@iot.selfLink": {
					"type": "string",
					"description": "The direct link to the entity"
				},
				"description": {
					"type": "string",
					"description": "A description of the datastream"
				},
				"name": {
					"type": "string",
					"description": "The label or name of the datastream"
				},
				"observationType": {
					"type": "string",
					"description": "The observation type for the datastream, as defined by the OGC Observations and Measurements standard"
				},
				"observedArea": {
					"type": "object",
					"properties": {
						"type": {
							"type": "string",
							"description": "The type of the observed area, as defined by the OGC Observations and Measurements standard"
						},
						"coordinates": {
							"type": "array",
							"items": {
								"type": "number"
							},
							"description": "The coordinates of the observed area, as defined by the OGC Observations and Measurements standard"
						}
					}
				},
				"phenomenonTime": {
					"type": "string",
					"description": "The range of phenomenon times from all observations belonging to the datastream"
				},
				"properties": {
					"type": "object",
					"properties": {
						"sen_id": {
							"type": "string",
							"description": "The Id of the record in the BGS Sensor Database that is the source of information for the datastream (SEN_MEASURE.measure_id)"
						},
						"data_type": {
							"type": "string",
							"description": "The type of data provided by the datastream (Measured or Calculated), derived from the observed property"
						},
						"access_restriction": {
							"type": "string",
							"description": "A description of any access restrictions that apply to metadata and observations associated with this datastream"
						},
						"data_usage": {
							"type": "string",
							"description": "A description of any restrictions that apply to the use of metadata and observations from this datastream"
						},
						"publish_yn\"": {
							"type": "string",
							"description": "A flag to indicate whether details of this datastream can be publicly released (set to Y or N)"
						}
					}
				},
				"resultTime": {
					"type": "string",
					"description": "The range of result times from all observations belonging to the datastream"
				},
				"unitOfMeasurement": {
					"type": "object",
					"properties": {
						"name": {
							"type": "string",
							"description": "The full name of the unit of measurement"
						},
						"symbol": {
							"type": "string",
							"description": "The symbol of the unit of measurement"
						},
						"defintion": {
							"type": "string",
							"description": "A URI for the unit of measurement providing a representation of its definition, ideally following the Unified Code for Unit of Measure (UCUM)"
						}
					}
				}
			}
		},
		"Datastreams": {
			"type": "object",
			"properties": {
				"@iot.count": {
					"type": "integer",
					"format" : "int64"
				},
				"@iot.nextLink": {
					"$ref": "#/definitions/nextLink"
				},
				"value": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Datastream"
					}
				}
			}
		},
		"FeatureOfInterest": {
			"type": "object",
			"properties": {
				"@iot.id": {
					"type": "integer",
					"description": "The Id of the feature of interest"
				},
				"@iot.selfLink": {
					"type": "string",
					"description": "The direct link to the entity"
				},
				"description": {
					"type": "string",
					"description": "A description of the feature of interest"
				},
				"encodingType": {
					"type": "string",
					"description": "The encoding type of the 'feature' property"
				},
				"feature": {
					"type": "string",
					"description": "The detailed description of the feature of interest, recorded in line with the type defined by the 'encodingType' property"
				},
				"name": {
					"type": "string",
					"description": "The label or name of the feature of interest"
				},
				"properties": {
					"type": "object",
					"properties": {
						"sen_id": {
							"type": "string",
							"description": "The Id of the record in the BGS Sensor Database that is the source of information for the feature of interest (SEN_FEATURE_OF_INTEREST.foi_id or SEN_SENSOR_LOCATION.sensor_loc_id)"
						},
						"type": {
							"type": "string",
							"description": "Indicates the feature of interest type, set to 'SEN_LOC' (Sensor Location) or 'BOREHOLE'"
						},
						"z": {
							"type": "number",
							"description": "The elevation (Z) of the sensor location (type 'SEN_LOC' only)"
						},
						"z_crs": {
							"type": "string",
							"description": "The vertical co-ordinate reference system of the Z value (type 'SEN_LOC' only)"
						},
						"from_date": {
							"type": "string",
							"description": "The time from which the sensor location is effective (type 'SEN_LOC' only)"
						},
						"to_date": {
							"type": "string",
							"description": "The time from which the sensor location is no longer effective, where it is not set the location is still active (type 'SEN_LOC' only)"
						},
						"active_yn\"": {
							"type": "string",
							"description": "A flag to indicate whether the sensor location is the active location for a thing (set to Y or N) (type 'SEN_LOC' only)"
						},
						"sobi_bgs_id": {
							"type": "number",
							"description": "The Id of the record in the BGS SOBI Database that is the source of information for the borehole (type 'BOREHOLE' only)"
						},
						"borehole_id": {
							"type": "number",
							"description": "The Id of the record in the BGS Universal Borehole Index that is the source of information for the borehole (type 'BOREHOLE' only)"
						},
						"drilled_length": {
							"type": "number",
							"description": "The drilled length of the borehole in metres (type 'BOREHOLE' only)"
						},
						"reference": {
							"type": "string",
							"description": "An alternative name by which the borehole is known (type 'BOREHOLE' only)"
						},
						"reference_type": {
							"type": "string",
							"description": "Indicates the source of the 'reference' property (type 'BOREHOLE' only)"
						},
						"publish_yn": {
							"type": "string",
							"description": "A flag to indicate whether details of this feature of interest can be publicly released (set to Y or N)"
						}
					}
				}
			}
		},
		"FeaturesOfInterest": {
			"type": "object",
			"properties": {
				"@iot.count": {
					"type": "integer",
					"description": "The total number of entities in the entityset"
				},
				"@iot.nextLink": {
					"$ref": "#/definitions/nextLink"
				},
				"value": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/FeatureOfInterest"
					}
				}
			}
		},
		"Location": {
			"type": "object",
			"properties": {
				"@iot.id": {
					"type": "integer",
					"description": "The Id of the location"
				},
				"@iot.selfLink": {
					"type": "string",
					"description": "The direct link to the entity"
				},
				"description": {
					"type": "string",
					"description": "A description of the location"
				},
				"encodingType": {
					"type": "string",
					"description": "The encoding type of the 'location' property"
				},
				"location": {
					"type": "string",
					"description": "The location, recorded in line with the type defined by the 'encodingType' property"
				},
				"name": {
					"type": "string",
					"description": "The label or name of the location"
				},
				"properties": {
					"type": "object",
					"properties": {
						"sen_id": {
							"type": "string",
							"description": "The Id of the record in the BGS Sensor Database that is the source of information for the location (SEN_SENSOR_LOCATION.sensor_loc_id)"
						},
						"site": {
							"type": "string",
							"description": "The name of the site to which the location belongs"
						},
						"observatory": {
							"type": "string",
							"description": "The name of the observatory to which the location belongs"
						},
						"z": {
							"type": "number",
							"description": "The elevation (Z) of the location"
						},
						"z_crs": {
							"type": "string",
							"description": "The vertical co-ordinate reference system of the Z value"
						},
						"from_date": {
							"type": "string",
							"description": "The time from which the location is effective"
						},
						"to_date": {
							"type": "string",
							"description": "The time from which the location is no longer effective, where it is not set the location is still active"
						},
						"comments": {
							"type": "string",
							"description": "Any additional information about the location where available"
						},
						"active_yn\"": {
							"type": "string",
							"description": "A flag to indicate whether the location is the active location for a thing (set to Y or N)"
						},
						"publish_yn\"": {
							"type": "string",
							"description": "A flag to indicate whether details of this location can be publicly released (set to Y or N)"
						}
					}
				}
			}
		},
		"Locations": {
			"type": "object",
			"properties": {
				"@iot.count": {
					"type": "integer",
					"description": "The total number of entities in the entityset"
				},
				"@iot.nextLink": {
					"$ref": "#/definitions/nextLink"
				},
				"value": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Location"
					}
				}
			}
		},
		"Observation": {
			"type": "object",
			"properties": {
				"@iot.id": {
					"type": "integer",
					"description": "The Id of the observation"
				},
				"@iot.selfLink": {
					"type": "string",
					"description": "The direct link to the entity"
				},
				"parameters": {
					"type": "object",
					"properties": {
						"sen_id": {
							"type": "string",
							"description": "The Id of the record in the BGS Sensor Database that is the source of information for the observation (SEN_SENSOR_DATA.sensor_data_id)"
						},
						"publish_yn\"": {
							"type": "string",
							"description": "A flag to indicate whether details of this observation can be publicly released (set to Y or N)"
						}
					}
				},
				"phenomenonTime": {
					"type": "string",
					"description": "The time when the observation happened"
				},
				"result": {
					"type": "string",
					"description": "The estimated value of the observed property"
				},
				"resultQuality": {
					"type": "string",
					"description": "A description of the quality of the result"
				},
				"resultTime": {
					"type": "string",
					"description": "The time the result was generated"
				},
				"validTime": {
					"type": "string",
					"description": "The time period during which the result can be used"
				}
			}
		},
		"Observations": {
			"type": "object",
			"properties": {
				"@iot.count": {
					"type": "integer",
					"description": "The total number of entities in the entityset"
				},
				"@iot.nextLink": {
					"$ref": "#/definitions/nextLink"
				},
				"value": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Observation"
					}
				}
			}
		},
		"ObservedProperties": {
			"type": "object",
			"properties": {
				"@iot.count": {
					"type": "integer",
					"description": "The total number of entities in the entityset"
				},
				"@iot.nextLink": {
					"$ref": "#/definitions/nextLink"
				},
				"value": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/ObservedProperty"
					}
				}
			}
		},
		"ObservedProperty": {
			"type": "object",
			"properties": {
				"@iot.id": {
					"type": "integer",
					"description": "The Id of the observed property"
				},
				"@iot.selfLink": {
					"type": "string",
					"description": "The direct link to the entity"
				},
				"definition": {
					"type": "string",
					"description": "A URI for the observed property providing a representation of its definition, ideally through reference to a community based vocabulary"
				},
				"description": {
					"type": "string",
					"description": "A description of the observed property"
				},
				"name": {
					"type": "string",
					"description": "The label or name of the observed property"
				},
				"properties": {
					"type": "object",
					"properties": {
						"sen_id": {
							"type": "string",
							"description": "The Id of the record in the BGS Sensor Database that is the source of information for the observed property (DIC_SEN_PROPERTY_TYPE.code)"
						},
						"data_type": {
							"type": "string",
							"description": "The type of data provided by the observed property (Measured or Calculated)"
						},
						"formula": {
							"type": "string",
							"description": "A description of the formula used to derive values for the observed property (data type 'Calculated' only)"
						},
						"publish_yn\"": {
							"type": "string",
							"description": "A flag to indicate whether details of this observed property can be publicly released (set to Y or N)"
						}
					}
				}
			}
		},
		"Sensor": {
			"type": "object",
			"properties": {
				"@iot.id": {
					"type": "integer",
					"description": "The Id of the sensor type"
				},
				"@iot.selfLink": {
					"type": "string",
					"description": "The direct link to the entity"
				},
				"description": {
					"type": "string",
					"description": "A description of the sensor type"
				},
				"encodingType": {
					"type": "string",
					"description": "The encoding type of the 'metadata' property"
				},
				"metadata": {
					"type": "string",
					"description": "A detailed description of the sensor type (style based on 'encodingType' property)"
				},
				"name": {
					"type": "string",
					"description": "The label or name of the sensor type"
				},
				"properties": {
					"type": "object",
					"properties": {
						"sen_id": {
							"type": "string",
							"description": "The Id of the record in the BGS Sensor Database that is the source of information for the sensor type (DIC_SEN_SENSOR_TYPE.code)"
						},
						"complex_data_yn\"": {
							"type": "string",
							"description": "A flag to indicate whether data from the sensor type is complex, and its data observations are therefore defined for MultiDatastreams rather than Datastreams (set to Y or N)"
						},
						"publish_yn\"": {
							"type": "string",
							"description": "A flag to indicate whether details of this sensor type can be publicly released (set to Y or N)"
						}
					}
				}
			}
		},
		"Sensors": {
			"type": "object",
			"properties": {
				"@iot.count": {
					"type": "integer",
					"description": "The total number of entities in the entityset"
				},
				"@iot.nextLink": {
					"$ref": "#/definitions/nextLink"
				},
				"value": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Sensor"
					}
				}
			}
		},
		"Thing": {
			"type": "object",
			"properties": {
				"@iot.id": {
					"type": "integer",
					"description": "The Id of the thing"
				},
				"@iot.selfLink": {
					"type": "string",
					"description": "The direct link to the entity"
				},
				"description": {
					"type": "string",
					"description": "A description of the thing"
				},
				"name": {
					"type": "string",
					"description": "The label or name of the thing"
				},
				"properties": {
					"type": "object",
					"properties": {
						"sen_id": {
							"type": "string",
							"description": "The Id of the record in the BGS Sensor Database that is the source of information for the thing (DIC_SEN_SENSOR.code)"
						},
						"type": {
							"type": "string",
							"description": "Indicates the type of thing, set to 'SENSOR'"
						},
						"serial_no": {
							"type": "string",
							"description": "The serial number of the physical sensor currently installed if known"
						},
						"data_capture": {
							"type": "string",
							"description": "Indicates how data from the thing is captured (Telemetered, Manual)"
						},
						"observation_start_date": {
							"type": "string",
							"description": "The earliest observation date for which data from the thing will be available in the API"
						},
						"datum_z": {
							"type": "number",
							"description": "The elevation (Z) of the thing's datum"
						},
						"datum_z_crs": {
							"type": "string",
							"description": "The vertical co-ordinate reference system of the 'datum_z' value"
						},
						"datum_name": {
							"type": "string",
							"description": "The label or name for the thing's datum"
						},
						"borehole_reference": {
							"type": "string",
							"description": "The Id of the record in the BGS Sensor Database that is the source of information for the thing (DIC_SEN_SENSOR.code)"
						},
						"access_restriction": {
							"type": "string",
							"description": "A description of any access restrictions that apply to metadata and observations associated with this thing"
						},
						"data_usage": {
							"type": "string",
							"description": "A description of any restrictions that apply to the use of metadata and observations from this thing"
						},
						"publish_yn\"": {
							"type": "string",
							"description": "A flag to indicate whether details of this thing can be publicly released (set to Y or N)"
						}
					}
				}
			}
		},
		"Things": {
			"type": "object",
			"properties": {
				"@iot.count": {
					"type": "integer",
					"description": "The total number of entities in the entityset"
				},
				"@iot.nextLink": {
					"$ref": "#/definitions/nextLink"
				},
				"value": {
					"type": "array",
					"items": {
						"$ref": "#/definitions/Thing"
					}
				}
			}
		}
	},
	"x-components": {
		"parameters": {
			"count": {
				"name": "$count",
				"in": "query",
				"description": "Flag indicating if the total number of items in the collection should be returned.",
				"required": false,
				"type": "boolean"
			},
			"entityId": {
				"name": "entityId",
				"in": "path",
				"description": "The id of the requested entity",
				"required": true,
				"type": "integer"
			},
			"expand": {
				"name": "$expand",
				"in": "query",
				"description": "The list of related queries that need to be included in the result",
				"required": false,
				"type": "string"
			},
			"filter": {
				"name": "$filter",
				"in": "query",
				"description": "A filter query",
				"required": false,
				"type": "string"
			},
			"select": {
				"name": "$select",
				"in": "query",
				"description": "The list of properties that need to be returned",
				"required": false,
				"type": "string"
			},
			"skip": {
				"name": "$skip",
				"in": "query",
				"description": "The number of elements to skip from the collection",
				"required": false,
				"type": "integer"
			},
			"top": {
				"name": "$top",
				"in": "query",
				"description": "The number of elements to return",
				"required": false,
				"type": "integer"
			}
		},
		"responses": {
			"Datastream-get-200": {
				"description": "Successful Response",
				"examples": {
					"application/json": {
						"@iot.id": 52,
						"description": "Water Temperature from BGS Groundwater Logger GGA04 - Measured (C)",
						"name": "GGA04_01 Water Temperature",
						"observationType": "http://www.opengis.net/def/observationType/OGC-OM/2.0/OM_Measurement",
						"observedArea": {
							"type": "Point",
							"coordinates": {
								"0": -4.199763807,
								"1": 55.837714666
							}
						},
						"phenomenonTime": "2020-01-13T14:30:00.000Z/2021-05-17T11:15:00.000Z",
						"properties": {
							"sen_id": 779,
							"data_type": "Measured",
							"access_restriction": "Unrestricted",
							"data_usage": "Available under the Open Government Licence subject to the following acknowledgement accompanying the reproduced NERC materials \\\"Contains NERC materials Â©NERC [year]\\\"",
							"publish_yn": "Y"
						},
						"resultTime": "2020-01-13T14:30:00.000Z/2021-05-17T11:15:00.000Z\"",
						"unitOfMeasurement": {
							"name": "Temperature in Degrees Celsius",
							"symbol": "C",
							"defintion": null
						}
					}
				},
				"schema": {
					"$ref": "#/definitions/Datastream"
				}
			},
			"Datastreams-get-200": {
				"description": "Successful Response",
				"schema": {
					"$ref": "#/definitions/Datastreams"
				}
			},
			"FeatureOfInterest-get-200": {
				"description": "Successful Response",
				"schema": {
					"$ref": "#/definitions/FeatureOfInterest"
				}
			},
			"FeaturesOfInterest-get-200": {
				"description": "Successful Response",
				"schema": {
					"$ref": "#/definitions/FeaturesOfInterest"
				}
			},
			"Location-get-200": {
				"description": "Successful Response",
				"examples": {
					"application/json": {
						"@iot.id": 28,
						"description": "BGS Groundwater Logger GGA04",
						"encodingType": "application/geo+json",
						"location": {
							"type": "Point",
							"coordinates": {
								"0": -4.19976380683196,
								"1": 55.837714666124
							}
						},
						"name": "SENSOR_GGA04_01",
						"properties": {
							"sen_id": 170155161,
							"site": "Site 2",
							"observatory": "UKGEOS Glasgow Observatory",
							"z": -4.82,
							"z_crs": "maOD",
							"from_date": "2021-02-24T10:15:00.000Z",
							"to_date": "None",
							"comments": "Height adjustment February 2021",
							"active_yn": "Y",
							"publish_yn": "Y"
						}
					}
				},
				"schema": {
					"$ref": "#/definitions/Location"
				}
			},
			"Locations-get-200": {
				"description": "Successful Response",
				"schema": {
					"$ref": "#/definitions/Locations"
				}
			},
			"Observation-get-200": {
				"description": "Successful Response",
				"examples": {
					"application/json": {
						"@iot.id": 168175600,
						"parameters": {
							"sen_id": 168175600,
							"publish_yn\"": "Y"
						},
						"phenomenonTime": "2021-02-24T14:30:00.000Z",
						"result": 11.61,
						"resultQuality": null,
						"resultTime": "2021-02-24T14:30:00.000Z",
						"validTime": null
					}
				},
				"schema": {
					"$ref": "#/definitions/Observation"
				}
			},
			"Observations-get-200": {
				"description": "Successful Response",
				"schema": {
					"$ref": "#/definitions/Observations"
				}
			},
			"ObservedProperties-get-200": {
				"description": "Successful Response",
				"schema": {
					"$ref": "#/definitions/ObservedProperties"
				}
			},
			"ObservedProperty-get-200": {
				"description": "Successful Response",
				"examples": {
					"application/json": {
						"@iot.id": 8,
						"description": "Water Pressure",
						"name": "Water Pressure",
						"properties": {
							"sen_id": 187,
							"data_type": "Calculated",
							"formula": "Water Pressure (mbar H2O) = Pressure (mbar) - Barometric Pressure (mbar)",
							"publish_yn\"": "Y"
						}
					}
				},
				"schema": {
					"$ref": "#/definitions/ObservedProperty"
				}
			},
			"Sensor-get-200": {
				"description": "Successful Response",
				"examples": {
					"application/json": {
						"@iot.id": 1,
						"description": "CT2X Groundwater logger measuring temperature, conductivity and pressure",
						"encodingType": "text/html",
						"metadata": "https://store.eonpro.com/store/p/2308-Aquistar-Conductivity-Loggers-CT2X-Cableless.aspx",
						"name": "CT2X Groundwater Logger",
						"properties": {
							"sen_id": 1,
							"complex_data_yn": "N",
							"publish_yn": "Y"
						}
					}
				},
				"schema": {
					"$ref": "#/definitions/Sensor"
				}
			},
			"Sensors-get-200": {
				"description": "Successful Response",
				"schema": {
					"$ref": "#/definitions/Sensors"
				}
			},
			"Thing-get-200": {
				"description": "Successful Response",
				"examples": {
					"application/json": {
						"@iot.id": 10,
						"@iot.selfLink": "http://sensors-internal.bgs.ac.uk/FROST-Server/v1.1/Things(10)",
						"description": "Groundwater logger measuring temperature, conductivity and pressure",
						"name": "BGS Groundwater Logger GGA04",
						"properties": {
							"sen_id": "GGA04_01",
							"type": "SENSOR",
							"serial_no": 21915016,
							"observation_start_time": "2020-03-16T14:00:00.000Z",
							"data_capture": "Manual",
							"datum_z": 12.11,
							"datum_z_crs": "maOD",
							"datum_name": "Top of Borehole Casing",
							"borehole_reference": "GGA04",
							"access_restriction": "Unrestricted",
							"data_usage": "Available under the Open Government Licence subject to the following acknowledgement accompanying the reproduced NERC materials \\\"Contains NERC materials Â©NERC [year]\\\"",
							"publish_yn": "Y"
						}
					}
				},
				"schema": {
					"$ref": "#/definitions/Thing"
				}
			},
			"Things-get-200": {
				"description": "Successful Response",
				"schema": {
					"$ref": "#/definitions/Things"
				}
			}
		}
	}
}

